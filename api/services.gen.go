// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List AdminAreas
	// (GET /admin-areas)
	ListAdminArea(c *gin.Context, params ListAdminAreaParams)
	// Create a new AdminArea
	// (POST /admin-areas)
	CreateAdminArea(c *gin.Context)
	// Deletes a AdminArea by ID
	// (DELETE /admin-areas/{id})
	DeleteAdminArea(c *gin.Context, id int)
	// Find a AdminArea by ID
	// (GET /admin-areas/{id})
	ReadAdminArea(c *gin.Context, id int)
	// Updates a AdminArea
	// (PATCH /admin-areas/{id})
	UpdateAdminArea(c *gin.Context, id int)
	// List attached Childrens
	// (GET /admin-areas/{id}/children)
	ListAdminAreaChildren(c *gin.Context, id int, params ListAdminAreaChildrenParams)
	// Find the attached AdminArea
	// (GET /admin-areas/{id}/parent)
	ReadAdminAreaParent(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAdminArea operation middleware
func (siw *ServerInterfaceWrapper) ListAdminArea(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAdminAreaParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAdminArea(c, params)
}

// CreateAdminArea operation middleware
func (siw *ServerInterfaceWrapper) CreateAdminArea(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAdminArea(c)
}

// DeleteAdminArea operation middleware
func (siw *ServerInterfaceWrapper) DeleteAdminArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAdminArea(c, id)
}

// ReadAdminArea operation middleware
func (siw *ServerInterfaceWrapper) ReadAdminArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadAdminArea(c, id)
}

// UpdateAdminArea operation middleware
func (siw *ServerInterfaceWrapper) UpdateAdminArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAdminArea(c, id)
}

// ListAdminAreaChildren operation middleware
func (siw *ServerInterfaceWrapper) ListAdminAreaChildren(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAdminAreaChildrenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAdminAreaChildren(c, id, params)
}

// ReadAdminAreaParent operation middleware
func (siw *ServerInterfaceWrapper) ReadAdminAreaParent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadAdminAreaParent(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin-areas", wrapper.ListAdminArea)
	router.POST(options.BaseURL+"/admin-areas", wrapper.CreateAdminArea)
	router.DELETE(options.BaseURL+"/admin-areas/:id", wrapper.DeleteAdminArea)
	router.GET(options.BaseURL+"/admin-areas/:id", wrapper.ReadAdminArea)
	router.PATCH(options.BaseURL+"/admin-areas/:id", wrapper.UpdateAdminArea)
	router.GET(options.BaseURL+"/admin-areas/:id/children", wrapper.ListAdminAreaChildren)
	router.GET(options.BaseURL+"/admin-areas/:id/parent", wrapper.ReadAdminAreaParent)
}

type N400JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N404JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N409JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type N500JSONResponse struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

type ListAdminAreaRequestObject struct {
	Params ListAdminAreaParams
}

type ListAdminAreaResponseObject interface {
	VisitListAdminAreaResponse(w http.ResponseWriter) error
}

type ListAdminArea200JSONResponse struct {
	CurrentPage  *int            `json:"current_page,omitempty"`
	Data         []AdminAreaList `json:"data"`
	FirstPageUrl *string         `json:"first_page_url,omitempty"`
	From         int             `json:"from"`
	LastPage     *int            `json:"last_page,omitempty"`
	LastPageUrl  *string         `json:"last_page_url,omitempty"`
	NextPageUrl  *string         `json:"next_page_url,omitempty"`
	Path         string          `json:"path"`
	PerPage      *int            `json:"per_page,omitempty"`
	PrevPageUrl  *string         `json:"prev_page_url,omitempty"`
	To           int             `json:"to"`
	Total        int             `json:"total"`
}

func (response ListAdminArea200JSONResponse) VisitListAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminArea400JSONResponse struct{ N400JSONResponse }

func (response ListAdminArea400JSONResponse) VisitListAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminArea404JSONResponse struct{ N404JSONResponse }

func (response ListAdminArea404JSONResponse) VisitListAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminArea409JSONResponse struct{ N409JSONResponse }

func (response ListAdminArea409JSONResponse) VisitListAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminArea500JSONResponse struct{ N500JSONResponse }

func (response ListAdminArea500JSONResponse) VisitListAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAdminAreaRequestObject struct {
	Body *CreateAdminAreaJSONRequestBody
}

type CreateAdminAreaResponseObject interface {
	VisitCreateAdminAreaResponse(w http.ResponseWriter) error
}

type CreateAdminArea200JSONResponse AdminAreaCreate

func (response CreateAdminArea200JSONResponse) VisitCreateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAdminArea400JSONResponse struct{ N400JSONResponse }

func (response CreateAdminArea400JSONResponse) VisitCreateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAdminArea409JSONResponse struct{ N409JSONResponse }

func (response CreateAdminArea409JSONResponse) VisitCreateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateAdminArea500JSONResponse struct{ N500JSONResponse }

func (response CreateAdminArea500JSONResponse) VisitCreateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAdminAreaRequestObject struct {
	Id int `json:"id"`
}

type DeleteAdminAreaResponseObject interface {
	VisitDeleteAdminAreaResponse(w http.ResponseWriter) error
}

type DeleteAdminArea204Response struct {
}

func (response DeleteAdminArea204Response) VisitDeleteAdminAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAdminArea400JSONResponse struct{ N400JSONResponse }

func (response DeleteAdminArea400JSONResponse) VisitDeleteAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAdminArea404JSONResponse struct{ N404JSONResponse }

func (response DeleteAdminArea404JSONResponse) VisitDeleteAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAdminArea409JSONResponse struct{ N409JSONResponse }

func (response DeleteAdminArea409JSONResponse) VisitDeleteAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAdminArea500JSONResponse struct{ N500JSONResponse }

func (response DeleteAdminArea500JSONResponse) VisitDeleteAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaRequestObject struct {
	Id int `json:"id"`
}

type ReadAdminAreaResponseObject interface {
	VisitReadAdminAreaResponse(w http.ResponseWriter) error
}

type ReadAdminArea200JSONResponse AdminAreaRead

func (response ReadAdminArea200JSONResponse) VisitReadAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminArea400JSONResponse struct{ N400JSONResponse }

func (response ReadAdminArea400JSONResponse) VisitReadAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminArea404JSONResponse struct{ N404JSONResponse }

func (response ReadAdminArea404JSONResponse) VisitReadAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminArea409JSONResponse struct{ N409JSONResponse }

func (response ReadAdminArea409JSONResponse) VisitReadAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminArea500JSONResponse struct{ N500JSONResponse }

func (response ReadAdminArea500JSONResponse) VisitReadAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAdminAreaRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateAdminAreaJSONRequestBody
}

type UpdateAdminAreaResponseObject interface {
	VisitUpdateAdminAreaResponse(w http.ResponseWriter) error
}

type UpdateAdminArea200JSONResponse AdminAreaUpdate

func (response UpdateAdminArea200JSONResponse) VisitUpdateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAdminArea400JSONResponse struct{ N400JSONResponse }

func (response UpdateAdminArea400JSONResponse) VisitUpdateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAdminArea404JSONResponse struct{ N404JSONResponse }

func (response UpdateAdminArea404JSONResponse) VisitUpdateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAdminArea409JSONResponse struct{ N409JSONResponse }

func (response UpdateAdminArea409JSONResponse) VisitUpdateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAdminArea500JSONResponse struct{ N500JSONResponse }

func (response UpdateAdminArea500JSONResponse) VisitUpdateAdminAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminAreaChildrenRequestObject struct {
	Id     int `json:"id"`
	Params ListAdminAreaChildrenParams
}

type ListAdminAreaChildrenResponseObject interface {
	VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error
}

type ListAdminAreaChildren200JSONResponse []AdminAreaChildrenList

func (response ListAdminAreaChildren200JSONResponse) VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminAreaChildren400JSONResponse struct{ N400JSONResponse }

func (response ListAdminAreaChildren400JSONResponse) VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminAreaChildren404JSONResponse struct{ N404JSONResponse }

func (response ListAdminAreaChildren404JSONResponse) VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminAreaChildren409JSONResponse struct{ N409JSONResponse }

func (response ListAdminAreaChildren409JSONResponse) VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListAdminAreaChildren500JSONResponse struct{ N500JSONResponse }

func (response ListAdminAreaChildren500JSONResponse) VisitListAdminAreaChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaParentRequestObject struct {
	Id int `json:"id"`
}

type ReadAdminAreaParentResponseObject interface {
	VisitReadAdminAreaParentResponse(w http.ResponseWriter) error
}

type ReadAdminAreaParent200JSONResponse AdminAreaParentRead

func (response ReadAdminAreaParent200JSONResponse) VisitReadAdminAreaParentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaParent400JSONResponse struct{ N400JSONResponse }

func (response ReadAdminAreaParent400JSONResponse) VisitReadAdminAreaParentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaParent404JSONResponse struct{ N404JSONResponse }

func (response ReadAdminAreaParent404JSONResponse) VisitReadAdminAreaParentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaParent409JSONResponse struct{ N409JSONResponse }

func (response ReadAdminAreaParent409JSONResponse) VisitReadAdminAreaParentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadAdminAreaParent500JSONResponse struct{ N500JSONResponse }

func (response ReadAdminAreaParent500JSONResponse) VisitReadAdminAreaParentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List AdminAreas
	// (GET /admin-areas)
	ListAdminArea(ctx context.Context, request ListAdminAreaRequestObject) (ListAdminAreaResponseObject, error)
	// Create a new AdminArea
	// (POST /admin-areas)
	CreateAdminArea(ctx context.Context, request CreateAdminAreaRequestObject) (CreateAdminAreaResponseObject, error)
	// Deletes a AdminArea by ID
	// (DELETE /admin-areas/{id})
	DeleteAdminArea(ctx context.Context, request DeleteAdminAreaRequestObject) (DeleteAdminAreaResponseObject, error)
	// Find a AdminArea by ID
	// (GET /admin-areas/{id})
	ReadAdminArea(ctx context.Context, request ReadAdminAreaRequestObject) (ReadAdminAreaResponseObject, error)
	// Updates a AdminArea
	// (PATCH /admin-areas/{id})
	UpdateAdminArea(ctx context.Context, request UpdateAdminAreaRequestObject) (UpdateAdminAreaResponseObject, error)
	// List attached Childrens
	// (GET /admin-areas/{id}/children)
	ListAdminAreaChildren(ctx context.Context, request ListAdminAreaChildrenRequestObject) (ListAdminAreaChildrenResponseObject, error)
	// Find the attached AdminArea
	// (GET /admin-areas/{id}/parent)
	ReadAdminAreaParent(ctx context.Context, request ReadAdminAreaParentRequestObject) (ReadAdminAreaParentResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListAdminArea operation middleware
func (sh *strictHandler) ListAdminArea(ctx *gin.Context, params ListAdminAreaParams) {
	var request ListAdminAreaRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAdminArea(ctx, request.(ListAdminAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAdminArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAdminAreaResponseObject); ok {
		if err := validResponse.VisitListAdminAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAdminArea operation middleware
func (sh *strictHandler) CreateAdminArea(ctx *gin.Context) {
	var request CreateAdminAreaRequestObject

	var body CreateAdminAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAdminArea(ctx, request.(CreateAdminAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAdminArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAdminAreaResponseObject); ok {
		if err := validResponse.VisitCreateAdminAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAdminArea operation middleware
func (sh *strictHandler) DeleteAdminArea(ctx *gin.Context, id int) {
	var request DeleteAdminAreaRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAdminArea(ctx, request.(DeleteAdminAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAdminArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAdminAreaResponseObject); ok {
		if err := validResponse.VisitDeleteAdminAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadAdminArea operation middleware
func (sh *strictHandler) ReadAdminArea(ctx *gin.Context, id int) {
	var request ReadAdminAreaRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadAdminArea(ctx, request.(ReadAdminAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadAdminArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadAdminAreaResponseObject); ok {
		if err := validResponse.VisitReadAdminAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAdminArea operation middleware
func (sh *strictHandler) UpdateAdminArea(ctx *gin.Context, id int) {
	var request UpdateAdminAreaRequestObject

	request.Id = id

	var body UpdateAdminAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAdminArea(ctx, request.(UpdateAdminAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAdminArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateAdminAreaResponseObject); ok {
		if err := validResponse.VisitUpdateAdminAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAdminAreaChildren operation middleware
func (sh *strictHandler) ListAdminAreaChildren(ctx *gin.Context, id int, params ListAdminAreaChildrenParams) {
	var request ListAdminAreaChildrenRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAdminAreaChildren(ctx, request.(ListAdminAreaChildrenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAdminAreaChildren")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAdminAreaChildrenResponseObject); ok {
		if err := validResponse.VisitListAdminAreaChildrenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadAdminAreaParent operation middleware
func (sh *strictHandler) ReadAdminAreaParent(ctx *gin.Context, id int) {
	var request ReadAdminAreaParentRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadAdminAreaParent(ctx, request.(ReadAdminAreaParentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadAdminAreaParent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadAdminAreaParentResponseObject); ok {
		if err := validResponse.VisitReadAdminAreaParentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaTW/bOBP+KwTf96jGbpse6lu22QUC9BC0u3spimAijm12JVIlR06Cwv99MaRkyZb8",
	"ha1386GDYVEacz74zPDR0D9kavPCGjTk5eSHdOgLazyGwfl4zF+pNYSG+BKKItMpkLZm9M1bw/d8Oscc",
	"wlOlND+C7NrZAh1pnmcKmcdEFq1bPKdC/qaHAuVEakM4QyeXiUTnrGOZZSI9AZW+JefJaTOTy2UiHX4v",
	"tUMlJ1/ibCvxr0ktbm+/YUpyyfIKfep0wfYFhQvItBLaFCUlQgGBqO6xEefj8+fquUNvS5eiMJbE1Jam",
	"cvj9c3U4tWaa6ZS0mYnaec/q3z1feJcG7wtMCZUICsOU0ZOg70Ll2lw4PNYvuL11/L2uLcymPTkgvUAB",
	"DkGwJC50iKVPxIfPf4oFZCV6mcgc7j+imdFcTt68e5fIXJt6/DqRpswyuM1QTsiVmGzGJpHpXGfKYVgd",
	"TZgHy/7vcCon8n+jpp6NKodHjbfL1XTgHDyE2RwCobqBgICpdTlfSQWEr0jnHPiOBVqxLDudl3kwurvQ",
	"Oea2G6pPmIP76ycEwUCOh61EkNyp703P/AW4KikOjmz8yc0hwSkLdWTQN1JCK1nFoJsOSQPvD2FxnyTI",
	"B1huh+WjwthH7WlA2ICw0yHsE4IaEDYg7HQI+yPoGTA2YOx0GLv5UPH2YcMcoHZiqF0Hm4Z9cwDaCYDG",
	"stpMe0L5+1x7ob0AI6AkK2Zo0LEh4uL6SrRkRQ4KhS1J2ClL/2pIxHdqoXCqTYArG6mJAy75+ef4/OL6",
	"SiZygc5HneOz12dj9tkWaKDQciLfno3P3koOGM0DqkfAi/CKYx/GM6Su8VyWxSqF/JkMU7oA8CtVCTQv",
	"/GE9IEdC5+Xky+Zsd3MgUcAMBVnh0Ch0ksMmJ/J7ie6hDu9EspBMWn22XUu7TDYVacJcpLY01GgSBX/i",
	"vL0q0V13tMJ91FpDcbsNX5P1PvmbEzYSSxdAH5zZC3sFBMd3xcJ+3NMZm2rno+ab0mU9bcpETp3N18wa",
	"95mVgT/Ug5XoVpUG7/dIMOz7H6A70IzC4WK3ErL7/SZLkO0T2yg88TdJnRVscryqkRBHIU7xMqxBMKhe",
	"struRqwahtg1w+Bla8hxq0B04ElCmbVKhsgqIFXnRn3gW+XNiIWak5Z9suetQ4p9su9bzf3dsiwUOuNl",
	"noN76BZBjivMuL61WuZfGSDW95TQ2G70AoTBu1ZgwCguSV578kKHQuXJOphht8rGOdp1luGBnn6x6uFU",
	"ZeZR0J6XQk82Mn4Hy+gxNeCJrIgcUbanYr+X/3BrOmjDqLrqO02sOOzx5eDkKR6t38zRLZm+TNbI0+iH",
	"VssIogypB06X4b4XNMdW/t9pmodbVSqjEleX3dSPPz6YYl1dMntc01TznaqUV3QnkNl1nBzMt7pc53xL",
	"EjWetr0Ud+BFjJZ64ntDvbbQWtnbB3F1uXWX6OXZv2mjDgJI2DYcUukM7xpdvPD77WNHywnKT3it31l8",
	"+lHY+rPDk8Ugg+cIABZA6bwLwdjuXUfyGkdJ52BmXMZ2EJU4ySPE38CWnhlbOoIZNQvF2I1toP+GJFVH",
	"KjutrdpUT7wm9VSTI9jUqP13nu2NKSCCdI5K1KcI+xpUtdyjqEvJT2yP/XstsZ++vR/Xl1o/MOo0qPY3",
	"JPyz6Uh00X9MhjX/5dpKSEMCrLQ0FWozNRqmOtMLNJF77GCl8SDm5XDT9snTztK/ijVZ8WKIaz/ItkF5",
	"ufw7AAD//61EJbWeLgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
